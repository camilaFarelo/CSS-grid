/*------------------------------------*\
    $FULLSTACKLABS-GRIDS
\*------------------------------------*/
/**
 * CONTENTS
 * INTRODUCTION.........How the grid system works.
 * VARIABLES............Your settings.
 * MIXINS...............Library mixins.
 * GRID SETUP...........Build the grid structure.
 * IE GRID..............Build the grid structure.
 * WIDTHS...............Build our responsive widths around our breakpoints.
 * PUSH.................Push classes.
 * PULL.................Pull classes.
 */

 /*------------------------------------*\
     $INTRODUCTION
 \*------------------------------------*/
 /**
 * Fullstacklabs grids provides you with widths to suit a number of breakpoints.
 * The grid caters to the following types of device:
 *
 * xs    -- small devices,  min-width: 480px
 * sm    -- palm-based devices, small phones, min-width: 620px
 * md    -- palm-based devices, like phones and samll tablets, min-width: 780px
 * lg    -- palm-based devices, like phones and small tablets, max-width: 1024px
 * xl    -- lap-based devices, like iPads or laptops, max-width: 1280px
 */

 /*------------------------------------*\
     $VARIABLES
 \*------------------------------------*/
 /**
  * If you are building a non-responsive site but would still like to use
  * csswizardry-grids, set this to ‘false’:
  */
 $responsive:            true;
 /**
  * If you are building a website that will work in IE and Edge
  * set $ie-grid to ‘false’:
  */
  $ie-grid:             true;
 /**
  * You can divide the page into a series of equal columns or rows.
  * this are the values
  */
  $default-columns-divisions : (
    "1": (
      "repeat_columns"      :1,
      "_ms_grid_columns"    :1fr,
    ),
    "2": (
       "repeat_columns"      :2,
       "_ms_grid_columns"    :1fr 1fr,
    ),
    "3": (
       "repeat_columns"      :3,
       "_ms_grid_columns"    :1fr 1fr 1fr,
    ),
    "4": (
       "repeat_columns"      :4,
       "_ms_grid_columns"    :1fr 1fr 1fr 1fr,
    ),
    "5": (
       "repeat_columns"      :5,
       "_ms_grid_columns"    :1fr 1fr 1fr 1fr 1fr,
    ),
    "6": (
       "repeat_columns"      :6,
       "_ms_grid_columns"    :1fr 1fr 1fr 1fr 1fr 1fr,
    ),
    "7": (
       "repeat_columns"      :7,
       "_ms_grid_columns"    :1fr 1fr 1fr 1fr 1fr 1fr 1fr,
    ),
    "8": (
       "repeat_columns"      :8,
       "_ms_grid_columns"    :1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr,
    ),
    "9": (
       "repeat_columns"      :9,
       "_ms_grid_columns"    :1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr,
    ),
    "10": (
       "repeat_columns"      :10,
       "_ms_grid_columns"    :1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr,
    ),
    "2-10": (
       "repeat_columns"      :2,
       "_ms_grid_columns"    :2fr 10fr,
    ),
    "3-9": (
       "repeat_columns"      :2,
       "_ms_grid_columns"    :3fr 9fr,
    ),
    "4-8": (
       "repeat_columns"      :2,
       "_ms_grid_columns"    :4fr 8fr,
    ),
    "5-7": (
       "repeat_columns"      :2,
       "_ms_grid_columns"    :5fr 7fr,
    ),
    "7-5": (
       "repeat_columns"      :2,
       "_ms_grid_columns"    :7fr 5fr,
    ),
    "8-4": (
       "repeat_columns"      :2,
       "_ms_grid_columns"    :8fr 4fr,
    ),
    "10-2": (
       "repeat_columns"      :2,
       "_ms_grid_columns"    :10fr 2fr,
    ),
    "2-8-2" : (
      "repeat_columns"      :3,
      "_ms_grid_columns"    :2fr 8fr 2fr,
    ),
  );
  /**
   * value of th grid for IE and EDGE
   */
  $ie-grid-divisions : (
    '1' : 100%,
    '2' : 50%,
    '3' : 33.333333%,
    '4' : 25%,
    '5' : 20%,
    '6' : 16.6666667%,
    '7' : 14.285714285714286%,
    '8' : 12.5%,
    '9' : 11.1111111111%,
    '10': 10%,
  );
  $ie-grid-2-divisions : (
    "2-10" : (
      "first-child" : 16.66666666%,
      "last-child"  : 83.33333333%,
    ),
    "3-9" : (
      "first-child" : 25%,
      "last-child"  : 75%,
    ),
    "4-8" : (
      "first-child" : 33.333333333%,
      "last-child"  : 66.666666667%,
    ),
    "5-7" : (
      "first-child" : 41.666666667%,
      "last-child"  : 58.333333333%,
    ),
    "7-5" : (
      "first-child" : 58.333333333%,
      "last-child"  : 41.666666667%,
    ),
    "8-4": (
      "first-child" : 66.666666667%,
      "last-child" : 33.333333333%,
    ),
    "9-3" : (
      "first-child" : 75%,
      "last-child"  : 25%,
    ),
    "10-2" : (
      "first-child" : 89.66666667%,
      "last-child"  : 10.33333333%,
    ),
  );
  $ie-grid-3-divisions : (
    "2-8-2" : (
      "first-child" : 16.66666667%,
      "middle-child": 66.66666667%,
      "last-child"  : 16.66666667%,
    ),
  );

 /**
  * Would you like to have custom grid?
  * set this to ‘false’ if you want to use the default grid
  */
  $custom-grid:          true;

  /**
   * Define your breakpoints. The first value is the prefix that shall be used for
   * your classes (e.g. `.palm--one-half`), the second value is the media query
   * that the breakpoint fires at.
   */
   $breakpoints: (
       'lg' '(min-width: #{$screen-large})',
       'md' '(min-width: #{$screen-medium})',
       'sm' '(min-width: #{$screen-small})',
       'xs' '(min-width: #{$screen-extra-small})'
   )!default;


  /**
   * Define which namespaced breakpoints you would like to generate for each of
   * widths, push and pull. This is handy if you only need pull on, say, desk, or
   * you only need a new width breakpoint at mobile sizes. It allows you to only
   * compile as much CSS as you need. All are turned on by default, but you can
   * add and remove breakpoints at will.
   *
   */
   $breakpoint-has-widths: ('xs','sm', 'md', 'lg')!default;


  /*------------------------------------*\
      $MIXINS
  \*------------------------------------*/
  /**
   * These mixins are for the library to use only, you should not need to modify
   * them at all.
   *
   * Enclose a block of code with a media query as named in `$breakpoints`.
   */
   @mixin grid-media-query($media-query){
       $breakpoint-found: false;

       @each $breakpoint in $breakpoints{
           $name: nth($breakpoint, 1);
           $declaration: nth($breakpoint, 2);

           @if $media-query == $name and $declaration{
               $breakpoint-found: true;

               @media only screen and #{$declaration}{
                   @content;
               }
           }
       }
   }

  @mixin custom-grid-breakpoint($breakpoint) {
    @if ($breakpoint != 0) {
      @media (min-width: $breakpoint) {
        @content;
      }
    } @else {
      @content;
    }
  };


  /*------------------------------------*\
      $WIDTHS
  \*------------------------------------*/
  /**
  * COLMNS
  */
  @each $name, $data in $default-columns-divisions {
    //CSS class
    .cssall {
      #{$css-class}cols-#{$name} {
        display: grid;
        display: -ms-grid;
        grid-template-columns: map-get($data, "_ms_grid_columns");
        -ms-grid-columns: map-get($data, "_ms_grid_columns");
      };
    }
  };

  @if $responsive == true {
    @each $size in $breakpoint-has-widths {
      @include grid-media-query($size) {
        @each $name, $data in $default-columns-divisions {
           //CSS class
          .cssall {
            #{$css-class}#{$size}--cols-#{$name} {
              justify-items: stretch;
              display: grid;
              grid-template-columns: map-get($data, "_ms_grid_columns");
              -ms-grid-columns: map-get($data, "_ms_grid_columns");
            };
          }
        };
      };
    };
  };

  //IE and Edge
  @each $name, $data in $ie-grid-divisions {
    //CSS class
    .no-cssall {
      #{$css-class}cols-#{$name} {
        & > .item-grid {
          max-width: $data;
          position: relative;
          width: 100%;
          display: inline-block;
        }
      };
    }
  }

  @each $name, $data in $ie-grid-2-divisions {
    //CSS class
    .no-cssall {
      #{$css-class}cols-#{$name} {
        .item-grid:first-child {
          max-width: map-get($data, "first-child");
          position: relative;
          width: 100%;
          display: inline-block;
        }
        .item-grid:last-child {
          max-width: map-get($data, "last-child");
          position: relative;
          width: 100%;
          display: inline-block;
        }
      };
    }
  }


  @if $responsive == true {
    @each $size in $breakpoint-has-widths {
      @include grid-media-query($size) {
        @each $name, $data in $ie-grid-2-divisions {
           //CSS class
          .no-cssall {
            #{$css-class}#{$size}--cols-#{$name} {
              .item-grid:first-child {
                max-width: map-get($data, "first-child");
                position: relative;
                width: 100%;
                display: inline-block;
              }
              .item-grid:last-child {
                max-width: map-get($data, "last-child");
                position: relative;
                width: 100%;
                display: inline-block;
              }
            };
          }
        };
      };
    };
  };

  @if $responsive == true {
    @each $size in $breakpoint-has-widths {
      @include grid-media-query($size) {
        @each $name, $data in $ie-grid-divisions {
           //CSS class
          .no-cssall {
            #{$css-class}#{$size}--cols-#{$name} {
              & > .item-grid {
                max-width: $data;
                position: relative;
                width: 100%;
                display: inline-block;
              }
            };
          }
        };
      };
    };
  };

  @each $name, $data in $ie-grid-3-divisions {
    //CSS class
    .no-cssall {
      #{$css-class}cols-#{$name} {
        .item-grid:first-child {
          max-width: map-get($data, "first-child");
          position: relative;
          width: 100%;
          display: inline-block;
        }
        :not(:first-child):not(:last-child) {
          max-width: map-get($data, "middle-child");
          position: relative;
          width: 100%;
          display: inline-block;
        }
        .item-grid:last-child {
          max-width: map-get($data, "last-child");
          position: relative;
          width: 100%;
          display: inline-block;
        }
      };
    }
  }

  @if $responsive == true {
    @each $size in $breakpoint-has-widths {
      @include grid-media-query($size) {
        @each $name, $data in $ie-grid-3-divisions {
           //CSS class
          .no-cssall {
            #{$css-class}#{$size}--cols-#{$name} {
              .item-grid:first-child {
                max-width: map-get($data, "first-child");
                position: relative;
                width: 100%;
                display: inline-block;
              }
              :not(:first-child):not(:last-child) {
                max-width: map-get($data, "middle-child");
                position: relative;
                width: 100%;
                display: inline-block;
              }
              .item-grid:last-child {
                max-width: map-get($data, "last-child");
                position: relative;
                width: 100%;
                display: inline-block;
              }
            };
          }
        };
      };
    };
  };
